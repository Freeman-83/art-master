# Generated by Django 4.2.6 on 2023-10-08 10:32

import colorfield.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True, verbose_name='Вид деятельности')),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ActivityService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_services', to='services.activity')),
            ],
            options={
                'ordering': ['activity'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(verbose_name='Адрес')),
            ],
        ),
        migrations.CreateModel(
            name='LocationService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_services', to='services.location')),
            ],
            options={
                'ordering': ['location'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Наименование услуги')),
                ('description', models.TextField(verbose_name='Описание')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата размещения информации')),
                ('activities', models.ManyToManyField(through='services.ActivityService', to='services.activity', verbose_name='Вид деятельности')),
                ('locations', models.ManyToManyField(through='services.LocationService', to='services.location', verbose_name='Локации')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Мастер')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['name'],
                'default_related_name': 'services',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Tag')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Slug')),
                ('color', colorfield.fields.ColorField(default='#FFFFFF', image_field=None, max_length=7, samples=None, unique=True, verbose_name='Цвет')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TagService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_tags', to='services.service')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_services', to='services.tag')),
            ],
            options={
                'ordering': ['tag'],
            },
        ),
        migrations.CreateModel(
            name='TagActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_tags', to='services.activity')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_activities', to='services.tag')),
            ],
            options={
                'ordering': ['tag'],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='tags',
            field=models.ManyToManyField(through='services.TagService', to='services.tag', verbose_name='Теги'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст')),
                ('score', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата публикации')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='services.service', verbose_name='Сервис')),
            ],
            options={
                'verbose_name': ('Review',),
                'verbose_name_plural': ('Reviews',),
                'ordering': ['pub_date'],
            },
        ),
        migrations.AddField(
            model_name='locationservice',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_locations', to='services.service'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата публикации')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='services.review', verbose_name='Отзыв')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['pub_date'],
            },
        ),
        migrations.AddField(
            model_name='activityservice',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_activities', to='services.service'),
        ),
        migrations.AddField(
            model_name='activity',
            name='tags',
            field=models.ManyToManyField(through='services.TagActivity', to='services.tag', verbose_name='Теги'),
        ),
        migrations.AddConstraint(
            model_name='tagservice',
            constraint=models.UniqueConstraint(fields=('tag', 'service'), name='unique_tag_service'),
        ),
        migrations.AddConstraint(
            model_name='tagactivity',
            constraint=models.UniqueConstraint(fields=('tag', 'activity'), name='unique_tag_activity'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('service', 'author'), name='unique_review'),
        ),
        migrations.AddConstraint(
            model_name='locationservice',
            constraint=models.UniqueConstraint(fields=('location', 'service'), name='unique_location_service'),
        ),
        migrations.AddConstraint(
            model_name='activityservice',
            constraint=models.UniqueConstraint(fields=('activity', 'service'), name='unique_activity_service'),
        ),
    ]
